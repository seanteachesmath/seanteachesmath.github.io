<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="programming">
<title>Programming</title>


<section xml:id="r-basic">
<title>Basic calculator functions</title>

<subsection xml:id="r-basic-preview">
<title>Preview</title>
<p>
</p>
</subsection>

<subsection xml:id="r-basic-review">
<title>Review</title>
<p>
</p>
</subsection>

<subsection xml:id="r-basic-summary">
<title>Student Perspective</title>
<p>
</p>
</subsection>

</section>


<section xml:id="r-programming">
<title>Basic calculator functions</title>

<subsection xml:id="r-programming-preview">
<title>Preview</title>
<p>
</p>
</subsection>

<subsection xml:id="r-programming-review">
<title>Review</title>
<p>
</p>
</subsection>

<subsection xml:id="r-programming-summary">
<title>Student Perspective</title>
<p>
</p>
</subsection>

</section>


<section xml:id="r-recurrence">
<title>Iteration</title>

<subsection xml:id="r-recurrence-preview">
<title>Preview</title>
<p>Applications of repeated function evaluation.</p>
</subsection>

<subsection xml:id="r-recurrence-review">
<title>Review</title>

<subsubsection xml:id="r-newtons-method">
<title>Newton's Method</title>
<p>
A famous method in all of mathematics is <term>Newton's Method</term>.  The idea is
simple: when trying to solve complicated or otherwise analytically
intractable equations of the form <m>f(x) = 0</m> for <m>x</m>, we often approximate the
function by its tangent line and solve <m>f_\text{tan}(x) = 0</m> for
<m>x</m> instead.  Repeated application of this procedure generates a
sequence of values that most often converges to the true solution of the
original problem.
</p>

<p>
We have <m>f_\text{tan}(x) = f(x_0) + f'(x_0)(x-x_0)</m>, and letting
<m>x_1</m> be the approximate solution to this equation, set 
<m>f_\text{tan}(x_1) = 0</m>, which gives <me>
\begin{aligned}[t]
0 \amp = f(x_0) + f'(x_0)(x_1 - x_0)\\
-f'(x_0)(x_1 - x_0) \amp = f(x_0)\\
(x_1 - x_0) \amp = \frac{f(x_0)}{-f'(x_0)}\\
x_1 \amp = x_0 - \frac{f(x_0)}{f'(x_0)}\\
\end{aligned}
</me>
Repeating this from <m>x_1</m> to generate a value for <m>x_2</m> allows us to generalize the rule<me>
x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)}</me>
Applying this method gives a sequence of values that most often approach a solution to the original equation. 
<algorithm>
<title>R code for approximating solutions to <m>f(x) = 0</m> by Newton's Method</title>
<cd>
x0 &lt;- 1
xs &lt;- x0
for(i in 1:n){
  x1 &lt;- x0 - f(x0)/fp(x0)     ## calculate new value
  xs &lt;- c(xs, x1)   ## store the new number
  x0 &lt;- x1          ## replace the old number by the new number, repeat
}
</cd>
</algorithm>
</p>


</subsubsection>

<subsubsection xml:id="r-fib-seq">
<title>Fibonacci numbers</title>
<p>In a similar fashion, we can quickly calculate and store <term>Fibonacci
numbers</term>.  This is done by calculating terms according to <m>x_{n+2} = x_{n+1} + x_{n}</m>
where <m>x_{2} = x_{1} = 1</m> (some, more modern, authors begin with <m>x_{0} = 0</m>). Consequently, the first few terms are <me>1, 1, 2, 3, 5, 8, 13, \dots.</me>
<algorithm>
<title>R code for calculating Fibonacci numbers</title>
<cd>
x0 &lt;- 1
x1 &lt;- 1
xs &lt;- c(x0, x1)
for(i in 1:n){
  x2 &lt;- x0 + x1     ## calculate the sum
  xs &lt;- c(xs, x2)   ## store the new number
  x0 &lt;- x1          ## replace the oldest number by the second oldest
  x1 &lt;- x2          ## replace the second oldest by the newest, repeat
}
</cd>
</algorithm>
</p>
</subsubsection>

<subsubsection xml:id="r-diff-eqs">
<title>Difference equations</title>
<p>
Also known as <term>discrete-time dynamical systems</term> or
<term>recurrence relations</term>, <term>difference equations</term>
generically refer to the application of some mathematical function to
generate terms in a sequence of values. One last, and famous, example of
this family of problems is the <term>discrete-logistic map</term> or the
discrete-logistic equation <me>x_{n+1} = rx_{n}(1-x_{n})</me> for
<m>0\lt x_{0}\lt 1</m> and <m> 0 \lt r \le 4</m>.
</p>

<p>The idea here is simple, we are engaging in function composition,
applying a function, generating a value, and re-applying the function to
that value.  We do this repeatedly and interesting patterns often
emerge from the sequence of values.
</p>

<figure xml:id="logistic-small">
<image source="./images/smallr.jpeg" width="80%">
</image>
<caption>A cobwebbing diagram and plot of solution to the discrete logistic map for <m>r = 0.95</m>.</caption>
</figure>

<figure xml:id="logistic-med2">
<image source="./images/medr2.jpeg" width="80%">
</image>
<caption>A cobwebbing diagram and plot of solution to the discrete logistic map for <m>r = 2.1</m>.</caption>
</figure>

<figure xml:id="logistic-med3">
<image source="./images/medr3.jpeg" width="80%">
</image>
<caption>A cobwebbing diagram and plot of solution to the discrete logistic map for <m>r = 3.1</m>.</caption>
</figure>

<figure xml:id="logistic-big">
<image source="./images/bigr.jpeg" width="80%">
</image>
<caption>A cobwebbing diagram and plot of solution to the discrete logistic map for <m>r = 3.5</m>.</caption>
</figure>

<figure xml:id="logistic-chaos">
<image source="./images/chaos.jpeg" width="80%">
</image>
<caption>A cobwebbing diagram and plot of solution to the discrete logistic map for <m>r = 3.9</m>.</caption>
</figure>

<figure xml:id="logistic-bif">
<image source="./images/bif.png" width="80%">
</image>
<caption>A plot of the final <m>300</m> of <m>1500</m> solution values generate for a range of <m>r</m> values between <m>1</m> and <m>4</m>.</caption>
</figure>


</subsubsection>
</subsection>

<subsection xml:id="r-recurrence-summary">
<title>Student Perspective</title>
<p>
</p>
</subsection>


</section>



</chapter>